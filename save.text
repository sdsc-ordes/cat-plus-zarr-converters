#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HCI {
    #[serde(rename = "hasCampaign")]
    pub has_campaign: Campaign,
}

impl InsertIntoGraph for HCI {
    fn insert_into(&self, graph: &mut LightGraph, iri: SimpleTerm) -> anyhow::Result<()> {
        for (pred, value) in
            [(rdf::type_, &cat::Campaign.as_simple())]
        {
            value.attach_into(
                graph,
                Link { source_iri: iri.clone(), pred: pred.as_simple(), target_iri: None },
            )?;
        }

        Ok(())
    }
}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Campaign {
    pub campaign_name: Option<String>,
    #[serde(rename = "Description")]
    pub description: Option<String>,
    #[serde(rename = "Objective")]
    pub objective: Option<String>,
    pub campaign_class: Option<String>g,
    #[serde(rename = "Type")]
    pub campaign_type: Option<String>,
    #[serde(rename = "Reference")]
    pub reference: Option<String>,
    #[serde(rename = "ReactionType")]
    pub reaction_type: Option<String>,
    #[serde(rename = "OptimizationType")]
    pub optimization_type: Option<String>,
    #[serde(rename = "Link")]
    pub link: Option<String>,
}

impl InsertIntoGraph for Campaign {
    fn insert_into(&self, graph: &mut LightGraph, iri: SimpleTerm) -> anyhow::Result<()> {
        for (pred, value) in
            [(schema::name, &self.campaign_name.as_simple())]
        {
            value.attach_into(
                graph,
                Link { source_iri: iri.clone(), pred: pred.as_simple(), target_iri: None },
            )?;
        }

        Ok(())
    }
}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Objective {
    #[serde(rename = "Condition")]
    pub condition: String,
    #[serde(rename = "Criteria")]
    pub criteria: String,
    #[serde(rename = "Description")]
    pub description: String,
    pub objective_name: String,
}

impl InsertIntoGraph for Objective {
    fn insert_into(&self, graph: &mut LightGraph, iri: SimpleTerm) -> anyhow::Result<()> {
        for (pred, value) in
            [(rdf::type_, &cat::Objective.as_simple()),
             (schema::name, &self.objective_name.as_simple())]
        {
            value.attach_into(
                graph,
                Link { source_iri: iri.clone(), pred: pred.as_simple(), target_iri: None },
            )?;
        }

        Ok(())
    }
}